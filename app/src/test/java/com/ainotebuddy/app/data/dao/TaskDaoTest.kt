package com.ainotebuddy.app.data.dao

import androidx.room.Room
import androidx.test.core.app.ApplicationProvider
import androidx.test.ext.junit.runners.AndroidJUnit4
import com.ainotebuddy.app.data.AppDatabase
import com.ainotebuddy.app.data.model.Task
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.test.runTest
import org.junit.After
import org.junit.Assert.*
import org.junit.Before
import org.junit.Test
import org.junit.runner.RunWith
import java.util.*

@RunWith(AndroidJUnit4::class)
class TaskDaoTest {
    private lateinit var database: AppDatabase
    private lateinit var taskDao: TaskDao
    
    private val testNoteId = 1L
    private val testTask = Task(
        id = 0, // Auto-generated by Room
        noteId = testNoteId,
        title = "Test Task",
        isCompleted = false,
        position = 0,
        createdAt = Date(),
        updatedAt = Date()
    )
    
    @Before
    fun createDb() {
        // Using an in-memory database for testing
        database = Room.inMemoryDatabaseBuilder(
            ApplicationProvider.getApplicationContext(),
            AppDatabase::class.java
        ).allowMainThreadQueries()
         .build()
        
        taskDao = database.taskDao()
    }
    
    @After
    fun closeDb() {
        database.close()
    }
    
    @Test
    fun insertTask_and_getTasksByNoteId() = runTest {
        // When
        val taskId = taskDao.insert(testTask)
        val tasks = taskDao.getTasksByNoteId(testNoteId).first()
        
        // Then
        assertEquals(1, tasks.size)
        assertEquals("Test Task", tasks[0].title)
        assertEquals(testNoteId, tasks[0].noteId)
        assertFalse(tasks[0].isCompleted)
        assertTrue(tasks[0].id > 0)
    }
    
    @Test
    fun updateTask() = runTest {
        // Given
        val taskId = taskDao.insert(testTask)
        val updatedTask = testTask.copy(
            id = taskId,
            title = "Updated Task",
            isCompleted = true
        )
        
        // When
        taskDao.update(updatedTask)
        val tasks = taskDao.getTasksByNoteId(testNoteId).first()
        
        // Then
        assertEquals(1, tasks.size)
        assertEquals("Updated Task", tasks[0].title)
        assertTrue(tasks[0].isCompleted)
    }
    
    @Test
    fun deleteTask() = runTest {
        // Given
        val taskId = taskDao.insert(testTask)
        val taskToDelete = testTask.copy(id = taskId)
        
        // When
        taskDao.delete(taskToDelete)
        val tasks = taskDao.getTasksByNoteId(testNoteId).first()
        
        // Then
        assertTrue(tasks.isEmpty())
    }
    
    @Test
    fun deleteTasksForNote() = runTest {
        // Given
        taskDao.insert(testTask)
        taskDao.insert(testTask.copy(title = "Task 2"))
        
        // When
        taskDao.deleteTasksForNote(testNoteId)
        val tasks = taskDao.getTasksByNoteId(testNoteId).first()
        
        // Then
        assertTrue(tasks.isEmpty())
    }
    
    @Test
    fun deleteCompletedTasks() = runTest {
        // Given
        val completedTask = testTask.copy(isCompleted = true)
        taskDao.insert(completedTask)
        taskDao.insert(testTask.copy(title = "Incomplete Task"))
        
        // When
        taskDao.deleteCompletedTasks(testNoteId)
        val tasks = taskDao.getTasksByNoteId(testNoteId).first()
        
        // Then
        assertEquals(1, tasks.size)
        assertEquals("Incomplete Task", tasks[0].title)
    }
    
    @Test
    fun getTaskCounts() = runTest {
        // Given
        taskDao.insert(testTask) // Incomplete
        taskDao.insert(testTask.copy(title = "Completed Task", isCompleted = true))
        taskDao.insert(testTask.copy(noteId = 2, title = "Task in another note"))
        
        // When
        val counts = taskDao.getTaskCounts().first()
        
        // Then
        assertEquals(2, counts.size) // Should have counts for note 1 and 2
        
        val note1Count = counts[testNoteId]!!
        assertEquals(2, note1Count.total)
        assertEquals(1, note1Count.completed)
        
        val note2Count = counts[2]!!
        assertEquals(1, note2Count.total)
        assertEquals(0, note2Count.completed)
    }
    
    @Test
    fun getTaskCountForNote() = runTest {
        // Given
        taskDao.insert(testTask) // Incomplete
        taskDao.insert(testTask.copy(title = "Completed Task", isCompleted = true))
        
        // When
        val count = taskDao.getTaskCountForNote(testNoteId)
        
        // Then
        assertNotNull(count)
        assertEquals(2, count?.total)
        assertEquals(1, count?.completed)
    }
}
